// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/subscription.repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dtos "subscription_service/internal/dtos"
	models "subscription_service/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscriptionPlan mocks base method.
func (m *MockSubscriptionRepository) CreateSubscriptionPlan(ctx context.Context, subscription *models.Subscription) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionPlan", ctx, subscription)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionPlan indicates an expected call of CreateSubscriptionPlan.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscriptionPlan(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionPlan", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscriptionPlan), ctx, subscription)
}

// DeleteSubscriptionPlan mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscriptionPlan(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionPlan", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionPlan indicates an expected call of DeleteSubscriptionPlan.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscriptionPlan(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionPlan", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscriptionPlan), ctx, id)
}

// GetSubscriptionPlan mocks base method.
func (m *MockSubscriptionRepository) GetSubscriptionPlan(ctx context.Context, id string) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionPlan", ctx, id)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionPlan indicates an expected call of GetSubscriptionPlan.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscriptionPlan(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionPlan", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscriptionPlan), ctx, id)
}

// ListSubscriptionPlans mocks base method.
func (m *MockSubscriptionRepository) ListSubscriptionPlans(ctx context.Context, pagination *dtos.Pagination) ([]*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionPlans", ctx, pagination)
	ret0, _ := ret[0].([]*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionPlans indicates an expected call of ListSubscriptionPlans.
func (mr *MockSubscriptionRepositoryMockRecorder) ListSubscriptionPlans(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionPlans", reflect.TypeOf((*MockSubscriptionRepository)(nil).ListSubscriptionPlans), ctx, pagination)
}

// UpdateSubscriptionPlan mocks base method.
func (m *MockSubscriptionRepository) UpdateSubscriptionPlan(ctx context.Context, id string, subscription *models.Subscription) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionPlan", ctx, id, subscription)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionPlan indicates an expected call of UpdateSubscriptionPlan.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSubscriptionPlan(ctx, id, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionPlan", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSubscriptionPlan), ctx, id, subscription)
}
